#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAXN 1024

// Функция за шифроване с шифъра на Виженер
char *vigenere_encrypt(char *text, char *key) {
    int text_length = strlen(text);
    int key_length = strlen(key);
    char *cipher = (char *)malloc(sizeof(char) * (text_length + 1));
    memset(cipher, '\0', text_length + 1);

    for (int i = 0; i < text_length; i++) {
        if (isalpha(text[i])) {
            int shift = tolower(key[i % key_length]) - 'a';
            if (islower(text[i])) {
                cipher[i] = (text[i] - 'a' + shift) % 26 + 'a';
            } else {
                cipher[i] = (text[i] - 'A' + shift) % 26 + 'A';
            }
        } else {
            cipher[i] = text[i];
        }
    }
    return cipher;
}

// Функция за дешифроване с шифъра на Виженер
char *vigenere_decrypt(char *cipher, char *key) {
    int text_length = strlen(cipher);
    int key_length = strlen(key);
    char *plaintext = (char *)malloc(sizeof(char) * (text_length + 1));
    memset(plaintext, '\0', text_length + 1);

    for (int i = 0; i < text_length; i++) {
        if (isalpha(cipher[i])) {
            int shift = tolower(key[i % key_length]) - 'a';
            if (islower(cipher[i])) {
                plaintext[i] = (cipher[i] - 'a' - shift + 26) % 26 + 'a';
            } else {
                plaintext[i] = (cipher[i] - 'A' - shift + 26) % 26 + 'A';
            }
        } else {
            plaintext[i] = cipher[i];
        }
    }
    return plaintext;
}

// Функция за четене на файл в буфер
char *read_file(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Грешка при отваряне на файла");
        exit(EXIT_FAILURE);
    }

    char *buffer = (char *)malloc(MAXN);
    memset(buffer, '\0', MAXN);
    fread(buffer, 1, MAXN, file);
    fclose(file);
    return buffer;
}

// Функция за запис във файл
void write_file(const char *filename, const char *text) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        perror("Грешка при запис във файла");
        exit(EXIT_FAILURE);
    }
    fprintf(file, "%s", text);
    fclose(file);
}

// Основно меню
int main() {
    int choice;
    char input_file[MAXN], output_file[MAXN], key[MAXN], key_file[MAXN];

    printf("Изберете опция:\n");
    printf("1 - Криптиране (прочитане на съобщение от файл и въвеждане на ключ)\n");
    printf("2 - Декриптиране (прочитане на съобщение и ключ от файлове)\n");
    printf("Вашият избор: ");
    scanf("%d", &choice);
    getchar();  // Изчистване на буфера

    if (choice == 1) {
        // Криптиране
        printf("Въведете името на входния файл: ");
        scanf("%s", input_file);
        printf("Въведете ключ: ");
        scanf("%s", key);
        printf("Въведете името на изходния файл: ");
        scanf("%s", output_file);

        char *plaintext = read_file(input_file);
        char *ciphertext = vigenere_encrypt(plaintext, key);
        write_file(output_file, ciphertext);

        printf("Съобщението е криптирано и записано в %s\n", output_file);

        free(plaintext);
        free(ciphertext);
    } else if (choice == 2) {
        // Декриптиране
        printf("Въведете името на криптирания файл: ");
        scanf("%s", input_file);
        printf("Въведете името на файла с ключа: ");
        scanf("%s", key_file);
        printf("Въведете името на изходния файл: ");
        scanf("%s", output_file);

        char *ciphertext = read_file(input_file);
        char *key = read_file(key_file);
        key[strcspn(key, "\r\n")] = 0;  // Премахване на нов ред от ключа

        char *plaintext = vigenere_decrypt(ciphertext, key);
        write_file(output_file, plaintext);

        printf("Съобщението е дешифрирано и записано в %s\n", output_file);

        free(ciphertext);
        free(key);
        free(plaintext);
    } else {
        printf("Невалиден избор!\n");
    }

    return EXIT_SUCCESS;
}
